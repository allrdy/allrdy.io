function normalizeLF(e){return e.replace(/\r\n|\r(?!\n)|\n/g,"\n")}function codeFrame(e,t){if(!t||void 0===t.line||void 0===t.column)return"";const r=normalizeLF(e).split("\n").map((e=>e.replace(/\t/g,"  "))),i=[];for(let e=-2;e<=2;e++)r[t.line+e]&&i.push(t.line+e);let s=0;for(const e of i){let t=`> ${e}`;t.length>s&&(s=t.length)}let o="";for(const e of i){const i=e===t.line-1;o+=i?"> ":"  ",o+=`${e+1} | ${r[e]}\n`,i&&(o+=`${Array.from({length:s}).join(" ")}  | ${Array.from({length:t.column}).join(" ")}^\n`)}return o}class AstroError extends Error{loc;title;hint;frame;type="AstroError";constructor(e,...t){super(...t);const{name:r,title:i,message:s,stack:o,location:n,hint:a,frame:m}=e;this.title=i,this.name=r,s&&(this.message=s),this.stack=o||this.stack,this.loc=n,this.hint=a,this.frame=m}setLocation(e){this.loc=e}setName(e){this.name=e}setMessage(e){this.message=e}setHint(e){this.hint=e}setFrame(e,t){this.frame=codeFrame(e,t)}static is(e){return"AstroError"===e.type}}const OnlyResponseCanBeReturned={name:"OnlyResponseCanBeReturned",title:"Invalid type returned by Astro page.",message:(e,t)=>`Route \`${e||""}\` returned a \`${t}\`. Only a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned from Astro files.`,hint:"See https://docs.astro.build/en/guides/server-side-rendering/#response for more information."},MissingMediaQueryDirective={name:"MissingMediaQueryDirective",title:"Missing value for `client:media` directive.",message:'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'},NoMatchingRenderer={name:"NoMatchingRenderer",title:"No matching renderer found.",message:(e,t,r,i)=>`Unable to render \`${e}\`.\n\n${i>0?`There ${r?"are":"is"} ${i} renderer${r?"s":""} configured in your \`astro.config.mjs\` file,\nbut ${r?"none were":"it was not"} able to server-side render \`${e}\`.`:"No valid renderer was found "+(t?`for the \`.${t}\` file extension.`:"for this file extension.")}`,hint:e=>`Did you mean to enable the ${e} integration?\n\nSee https://docs.astro.build/en/core-concepts/framework-components/ for more information on how to install and configure integrations.`},NoClientEntrypoint={name:"NoClientEntrypoint",title:"No client entrypoint specified in renderer.",message:(e,t,r)=>`\`${e}\` component has a \`client:${t}\` directive, but no client entrypoint was provided by \`${r}\`.`,hint:"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."},NoClientOnlyHint={name:"NoClientOnlyHint",title:"Missing hint on client:only directive.",message:e=>`Unable to render \`${e}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,hint:e=>`Did you mean to pass \`client:only="${e}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`},NoMatchingImport={name:"NoMatchingImport",title:"No import found for component.",message:e=>`Could not render \`${e}\`. No matching import has been found for \`${e}\`.`,hint:"Please make sure the component is properly imported."},InvalidComponentArgs={name:"InvalidComponentArgs",title:"Invalid component arguments.",message:e=>`Invalid arguments passed to${e?` <${e}>`:""} component.`,hint:"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."},ImageMissingAlt={name:"ImageMissingAlt",title:"Missing alt property.",message:"The alt property is required.",hint:"The `alt` property is important for the purpose of accessibility, without it users using screen readers or other assistive technologies won't be able to understand what your image is supposed to represent. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-alt for more information."},InvalidImageService={name:"InvalidImageService",title:"Error while loading image service.",message:"There was an error loading the configured image service. Please see the stack trace for more information."},MissingImageDimension={name:"MissingImageDimension",title:"Missing image dimensions",message:(e,t)=>`Missing ${"both"===e?"width and height attributes":`${e} attribute`} for ${t}. When using remote images, both dimensions are always required in order to avoid CLS.`,hint:"If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets)."},UnsupportedImageFormat={name:"UnsupportedImageFormat",title:"Unsupported image format",message:(e,t,r)=>`Received unsupported format \`${e}\` from \`${t}\`. Currently only ${r.join(", ")} are supported by our image services.`,hint:"Using an `img` tag directly instead of the `Image` component might be what you're looking for."},UnsupportedImageConversion={name:"UnsupportedImageConversion",title:"Unsupported image conversion",message:"Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported."},ExpectedImage={name:"ExpectedImage",title:"Expected src to be an image.",message:(e,t,r)=>`Expected \`src\` property for \`getImage\` or \`<Image />\` to be either an ESM imported image or a string with the path of a remote image. Received \`${e}\` (type: \`${t}\`).\n\nFull serialized options received: \`${r}\`.`,hint:"This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it."},ExpectedImageOptions={name:"ExpectedImageOptions",title:"Expected image options.",message:e=>`Expected getImage() parameter to be an object. Received \`${e}\`.`},IncompatibleDescriptorOptions={name:"IncompatibleDescriptorOptions",title:"Cannot set both `densities` and `widths`",message:"Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.",hint:"Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors."},LocalImageUsedWrongly={name:"LocalImageUsedWrongly",title:"Local images must be imported.",message:e=>`\`Image\`'s and \`getImage\`'s \`src\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \`${e}\`.`,hint:"If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections) See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property."},AstroGlobUsedOutside={name:"AstroGlobUsedOutside",title:"Astro.glob() used outside of an Astro file.",message:e=>`\`Astro.glob(${e})\` can only be used in \`.astro\` files. \`import.meta.glob(${e})\` can be used instead to achieve a similar result.`,hint:"See Vite's documentation on `import.meta.glob` for more information: https://vitejs.dev/guide/features.html#glob-import"},AstroGlobNoMatch={name:"AstroGlobNoMatch",title:"Astro.glob() did not match any files.",message:e=>`\`Astro.glob(${e})\` did not return any matching files. Check the pattern for typos.`},MissingSharp={name:"MissingSharp",title:"Could not find Sharp.",message:"Could not find Sharp. Please install Sharp (`sharp`) manually into your project or migrate to another image service.",hint:"See Sharp's installation instructions for more information: https://sharp.pixelplumbing.com/install. If you are not relying on `astro:assets` to optimize, transform, or process any images, you can configure a passthrough image service instead of installing Sharp. See https://docs.astro.build/en/reference/errors/missing-sharp for more information.\n\nSee https://docs.astro.build/en/guides/images/#default-image-service for more information on how to migrate to another image service."},UnknownContentCollectionError={name:"UnknownContentCollectionError",title:"Unknown Content Collection Error."};function prependForwardSlash(e){return"/"===e[0]?e:"/"+e}function removeTrailingForwardSlash(e){return e.endsWith("/")?e.slice(0,e.length-1):e}function removeLeadingForwardSlash(e){return e.startsWith("/")?e.substring(1):e}function trimSlashes(e){return e.replace(/^\/|\/$/g,"")}function isString(e){return"string"==typeof e||e instanceof String}function joinPaths(...e){return e.filter(isString).map(((t,r)=>0===r?removeTrailingForwardSlash(t):r===e.length-1?removeLeadingForwardSlash(t):trimSlashes(t))).join("/")}function isRemotePath(e){return/^(http|ftp|https|ws):?\/\//.test(e)||e.startsWith("data:")}const VALID_SUPPORTED_FORMATS=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],DEFAULT_OUTPUT_FORMAT="webp",DEFAULT_HASH_PROPS=["src","width","height","format","quality"];function isLocalService(e){return!!e&&"transform"in e}function parseQuality(e){let t=parseInt(e);return Number.isNaN(t)?e:t}const baseService={propertiesToHash:DEFAULT_HASH_PROPS,validateOptions(e){if(!e.src||"string"!=typeof e.src&&"object"!=typeof e.src)throw new AstroError({...ExpectedImage,message:ExpectedImage.message(JSON.stringify(e.src),typeof e.src,JSON.stringify(e,((e,t)=>void 0===t?null:t)))});if(isESMImportedImage(e.src)){if(!VALID_SUPPORTED_FORMATS.includes(e.src.format))throw new AstroError({...UnsupportedImageFormat,message:UnsupportedImageFormat.message(e.src.format,e.src.src,VALID_SUPPORTED_FORMATS)});if(e.widths&&e.densities)throw new AstroError(IncompatibleDescriptorOptions);if("svg"===e.src.format&&(e.format="svg"),"svg"===e.src.format&&"svg"!==e.format||"svg"!==e.src.format&&"svg"===e.format)throw new AstroError(UnsupportedImageConversion)}else{if(e.src.startsWith("/@fs/")||!isRemotePath(e.src)&&!e.src.startsWith("/"))throw new AstroError({...LocalImageUsedWrongly,message:LocalImageUsedWrongly.message(e.src)});let t;if(e.width||e.height?!e.width&&e.height?t="width":e.width&&!e.height&&(t="height"):t="both",t)throw new AstroError({...MissingImageDimension,message:MissingImageDimension.message(t,e.src)})}return e.format||(e.format="webp"),e.width&&(e.width=Math.round(e.width)),e.height&&(e.height=Math.round(e.height)),e},getHTMLAttributes(e){const{targetWidth:t,targetHeight:r}=getTargetDimensions(e),{src:i,width:s,height:o,format:n,quality:a,densities:m,widths:c,formats:h,...l}=e;return{...l,width:t,height:r,loading:l.loading??"lazy",decoding:l.decoding??"async"}},getSrcSet(e){const t=[],{targetWidth:r}=getTargetDimensions(e),{widths:i,densities:s}=e,o=e.format??"webp";let n=e.width,a=1/0;isESMImportedImage(e.src)&&(n=e.src.width,a=n);const{width:m,height:c,...h}=e,l=[];if(s){const e=s.map((e=>"number"==typeof e?e:parseFloat(e))),t=e.sort().map((e=>Math.round(r*e)));l.push(...t.map(((t,r)=>({maxTargetWidth:Math.min(t,a),descriptor:`${e[r]}x`}))))}else i&&l.push(...i.map((e=>({maxTargetWidth:Math.min(e,a),descriptor:`${e}w`}))));for(const{maxTargetWidth:r,descriptor:i}of l){const s={...h};r!==n?s.width=r:e.width&&e.height&&(s.width=e.width,s.height=e.height),t.push({transform:s,descriptor:i,attributes:{type:`image/${o}`}})}return t},getURL(e,t){const r=new URLSearchParams;if(isESMImportedImage(e.src))r.append("href",e.src.src);else{if(!isRemoteAllowed(e.src,t))return e.src;r.append("href",e.src)}Object.entries({w:"width",h:"height",q:"quality",f:"format"}).forEach((([t,i])=>{e[i]&&r.append(t,e[i].toString())}));return`${joinPaths("/","/_image")}?${r}`},parseURL(e){const t=e.searchParams;if(!t.has("href"))return;return{src:t.get("href"),width:t.has("w")?parseInt(t.get("w")):void 0,height:t.has("h")?parseInt(t.get("h")):void 0,format:t.get("f"),quality:t.get("q")}}};function getTargetDimensions(e){let t=e.width,r=e.height;if(isESMImportedImage(e.src)){const i=e.src.width/e.src.height;r&&!t?t=Math.round(r*i):t&&!r?r=Math.round(t/i):t||r||(t=e.src.width,r=e.src.height)}return{targetWidth:t,targetHeight:r}}function matchPattern(e,t){return matchProtocol(e,t.protocol)&&matchHostname(e,t.hostname,!0)&&matchPort(e,t.port)&&matchPathname(e,t.pathname,!0)}function matchPort(e,t){return!t||t===e.port}function matchProtocol(e,t){return!t||t===e.protocol.slice(0,-1)}function matchHostname(e,t,r){if(!t)return!0;if(!r||!t.startsWith("*"))return t===e.hostname;if(t.startsWith("**.")){const r=t.slice(2);return r!==e.hostname&&e.hostname.endsWith(r)}if(t.startsWith("*.")){const r=t.slice(1);return 1===e.hostname.replace(r,"").split(".").filter(Boolean).length}return!1}function matchPathname(e,t,r){if(!t)return!0;if(!r||!t.endsWith("*"))return t===e.pathname;if(t.endsWith("/**")){const r=t.slice(0,-2);return r!==e.pathname&&e.pathname.startsWith(r)}if(t.endsWith("/*")){const r=t.slice(0,-1);return 1===e.pathname.replace(r,"").split("/").filter(Boolean).length}return!1}function isESMImportedImage(e){return"object"==typeof e}function isRemoteImage(e){return"string"==typeof e}function isRemoteAllowed(e,{domains:t=[],remotePatterns:r=[]}){if(!isRemotePath(e))return!1;const i=new URL(e);return t.some((e=>matchHostname(i,e)))||r.some((e=>matchPattern(i,e)))}async function getConfiguredImageService(){if(!globalThis?.astroAsset?.imageService){const{default:e}=await Promise.resolve().then((()=>sharp$1)).catch((e=>{const t=new AstroError(InvalidImageService);throw t.cause=e,t}));return globalThis.astroAsset||(globalThis.astroAsset={}),globalThis.astroAsset.imageService=e,e}return globalThis.astroAsset.imageService}async function getImage(e,t){if(!e||"object"!=typeof e)throw new AstroError({...ExpectedImageOptions,message:ExpectedImageOptions.message(JSON.stringify(e))});const r=await getConfiguredImageService(),i={...e,src:"object"==typeof e.src&&"then"in e.src?(await e.src).default??await e.src:e.src},s=isESMImportedImage(i.src)?i.src.clone??i.src:i.src;i.src=s;const o=r.validateOptions?await r.validateOptions(i,t):i,n=r.getSrcSet?await r.getSrcSet(o,t):[];let a=await r.getURL(o,t),m=await Promise.all(n.map((async e=>({transform:e.transform,url:await r.getURL(e.transform,t),descriptor:e.descriptor,attributes:e.attributes}))));if(isLocalService(r)&&globalThis.astroAsset.addStaticImage&&(!isRemoteImage(o.src)||a!==o.src)){const e=r.propertiesToHash??DEFAULT_HASH_PROPS;a=globalThis.astroAsset.addStaticImage(o,e),m=n.map((t=>({transform:t.transform,url:globalThis.astroAsset.addStaticImage(t.transform,e),descriptor:t.descriptor,attributes:t.attributes})))}return{rawOptions:i,options:o,src:a,srcSet:{values:m,attribute:m.map((e=>`${e.url} ${e.descriptor}`)).join(", ")},attributes:void 0!==r.getHTMLAttributes?await r.getHTMLAttributes(o,t):{}}}let sharp;const qualityTable={low:25,mid:50,high:80,max:100};async function loadSharp(){let e;try{e=(await import("sharp")).default}catch(e){throw new AstroError(MissingSharp)}return e}const sharpService={validateOptions:baseService.validateOptions,getURL:baseService.getURL,parseURL:baseService.parseURL,getHTMLAttributes:baseService.getHTMLAttributes,getSrcSet:baseService.getSrcSet,async transform(e,t){sharp||(sharp=await loadSharp());const r=t;if("svg"===r.format)return{data:e,format:"svg"};let i=sharp(e,{failOnError:!1,pages:-1});if(i.rotate(),r.height&&!r.width?i.resize({height:Math.round(r.height)}):r.width&&i.resize({width:Math.round(r.width)}),r.format){let e;if(r.quality){const t=parseQuality(r.quality);e="number"==typeof t?t:r.quality in qualityTable?qualityTable[r.quality]:void 0}i.toFormat(r.format,{quality:e})}const{data:s,info:o}=await i.toBuffer({resolveWithObject:!0});return{data:s,format:o.format}}};var sharp_default=sharpService;const sharp$1=Object.freeze(Object.defineProperty({__proto__:null,default:sharp_default},Symbol.toStringTag,{value:"Module"}));export{AstroError as A,InvalidComponentArgs as I,MissingMediaQueryDirective as M,NoMatchingImport as N,OnlyResponseCanBeReturned as O,UnknownContentCollectionError as U,AstroGlobUsedOutside as a,AstroGlobNoMatch as b,NoClientOnlyHint as c,NoMatchingRenderer as d,NoClientEntrypoint as e,ImageMissingAlt as f,getImage as g,isESMImportedImage as i,prependForwardSlash as p};